The ``0-add_integer`` module test file
======================================

    >>> add_integer = __import__('0-add_integer').add_integer

    >>> add_integer(6, 5)
    11

    >>> add_integer(1, -5.9)
    -4

    >>> add_integer(3.5, 2)
    5

    >>> add_integer(10.343, 2.56)
    12

    >>> add_integer(-2, -1)
    -3

    >>> add_integer(-2.56, -1.123)
    -3

    >>> add_integer([9, 10], 9)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(int("Hello"), 1)
    Traceback (most recent call last):
    ValueError: invalid literal for int() with base 10: 'Hello'

    >>> add_integer(-2, float("School"))
    Traceback (most recent call last):
    ValueError: could not convert string to float: 'School'

    >>> add_integer(float("NaN"), 1)
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

    >>> add_integer(float("inf"), 1)
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(10, "Test")
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer(45.90, {'id': 1, 'name': "John"})
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer(-34, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer(0.6, False)
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer((0, "Hello"), 0)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer({2, 5}, 12.4232)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(2)
    100
    
    >>> add_integer()
    Traceback (most recent call last):
    TypeError: add_integer() missing 1 required positional argument: 'a'
