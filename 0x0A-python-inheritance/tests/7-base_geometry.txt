The ``1-my_list`` module test file
======================================

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
    >>> bg = BaseGeometry()

    >>> bg.integer_validator("my_int", 12)

    >>> bg.integer_validator("name", "John")
    Traceback (most recent call last):
    TypeError: name must be an integer

    >>> bg.integer_validator("grade", 12.5)
    Traceback (most recent call last):
    TypeError: grade must be an integer

    >>> bg.integer_validator("check", False)
    Traceback (most recent call last):
    TypeError: check must be an integer

    >>> bg.integer_validator("distance", -4)
    Traceback (most recent call last):
    ValueError: distance must be greater than 0

    >>> bg.integer_validator("height", 0)
    Traceback (most recent call last):
    ValueError: height must be greater than 0

    >>> bg.integer_validator("var", (0, 1))
    Traceback (most recent call last):
    TypeError: var must be an integer

    >>> bg.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

    >>> bg.integer_validator("my_int")
    Traceback (most recent call last):
    TypeError: integer_validator() missing 1 required positional argument: 'value'

    >>> bg.integer_validator("var", None)
    Traceback (most recent call last):
    TypeError: var must be an integer

    >>> bg.integer_validator("var", [1, 2, 3])
    Traceback (most recent call last):
    TypeError: var must be an integer

    >>> bg.integer_validator("var", {1, 2, 3})
    Traceback (most recent call last):
    TypeError: var must be an integer

    >>> bg.integer_validator("var", {'id': 1, 'value': 2})
    Traceback (most recent call last):
    TypeError: var must be an integer

    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented
